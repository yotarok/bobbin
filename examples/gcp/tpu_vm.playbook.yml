# Run this as:
# ansible-playbook ./examples/gcp/tpu_vm.playbook.yml \
#   "zone=us-central1-c project=some_project node_name=bobbin-tpu"
- name: Setup TPU host(s)
  hosts: localhost
  gather_facts: false
  vars:
    zone: CONFIG_NOT_PROVIDED
    project: CONFIG_NOT_PROVIDED
    node_name: CONFIG_NOT_PROVIDED
    accelerator_type: v2-8
    vm_version: tpu-vm-base
  tasks:
    - name: Create TPU node
      ansible.builtin.shell:
        cmd: |
          NUM_VMS=$(gcloud compute tpus tpu-vm list --zone {{ vars.zone }} \
             --project {{ vars.project }} --format json | jq '. | length')
          if [[ 0 -eq "${NUM_VMS}" ]]; then
            gcloud compute tpus tpu-vm create {{ vars.node_name }} --zone {{ vars.zone }} \
              --project {{ vars.project }} --accelerator-type {{ vars.accelerator_type }} \
              --version {{ vars.vm_version }}
            echo "CREATED"
          else
            echo "ALREADY_CREATED"
          fi
          SSH_CMD=$(gcloud compute tpus tpu-vm ssh {{ vars.node_name }} --zone {{ vars.zone }} --project {{ vars.project }} --dry-run)
          SSH_OPTS=$(echo "${SSH_CMD}" | sed 's/^[^ ]* //' | sed 's/ [^ ]*$//' | sed 's/-t //')
          TARGET=$(echo "${SSH_CMD}" | sed 's/^.* \([^ ]*\)$/\1/')
          USER=$(echo "${TARGET}" | cut -d'@' -f 1)
          HOST=$(echo "${TARGET}" | cut -d'@' -f 2)
          echo ${SSH_OPTS}
          echo ${USER}
          echo ${HOST}
      changed_when: "'ALREADY_CREATED' not in create_tpu_result.stdout"
      register: create_tpu_result
    - name: Set SSH options
      ansible.builtin.set_fact:
        tpu_ssh_common_args: "{{ create_tpu_result.stdout_lines[1] }}"
        tpu_ssh_user: "{{ create_tpu_result.stdout_lines[2] }}"
        tpm_vm_name: "{{ node_name }}"
    - name: Set SSH host IP address
      ansible.builtin.add_host:
        name: "{{ create_tpu_result.stdout_lines[3] }}"
        group: tpus
- name: Setup TPU Host
  hosts: tpus
  vars:
    zone: CONFIG_NOT_PROVIDED
    project: CONFIG_NOT_PROVIDED
    node_name: CONFIG_NOT_PROVIDED
    ansible_ssh_common_args: "{{ hostvars.localhost.tpu_ssh_common_args }}"
    ansible_ssh_user: "{{ hostvars.localhost.tpu_ssh_user }}"
    bobbin_root: "{{ ansible_facts.env.PWD }}/bobbin"
  tasks:
    - name: Install jax
      ansible.builtin.pip:
        name: "jax[tpu]"
        extra_args: "--find-links=https://storage.googleapis.com/jax-releases/libtpu_releases.html"
      become: true
    - name: Synchronize bobbin dir
      ansible.posix.synchronize:
        src: "{{ playbook_dir }}/../.."
        dest: "{{ bobbin_root }}"
        use_ssh_args: true
        rsync_opts:
          - "--exclude=.*"
          - "--exclude=*.pyc"
          - "--exclude=__*"
          - "--exclude=build"
          - "--exclude=*.egg-info"
      # noqa args  # `use_ssh_args` is relatively new and ansible-lint may not support.
    - name: Install bobbin prerequiments
      ansible.builtin.pip:
        requirements: "{{ bobbin_root }}/requirements/requirements.txt"
      become: true
    - name: Install bobbin
      ansible.builtin.pip:
        chdir: "{{ bobbin_root }}"
        name: "."
        state: "forcereinstall"
    - name: Install utilities for example trainers
      ansible.builtin.pip:
        name:
          - "tensorboard"
          - "tensorflow-io"
      become: true
    - name: Give final notes
      ansible.builtin.debug:
        msg: |
          Now, you can run arbitrary scripts, e.g., as follows.
          ```
          gcloud compute tpus tpu-vm ssh {{ node_name }} \
            --zone {{ zone }} --project {{ project }} \
            python3 {{ bobbin_root }}/example/mnist.py [args]
          ```

          Don't forget to delete TPU-VM when you are done :)
          ```
          gcloud compute tpus tpu-vm delete {{ node_name }} --zone {{ zone }} --project {{ project }}
          ```
